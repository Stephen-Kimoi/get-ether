{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","loading","setLoading","sucessfull","setSucessfull","allWaves","setAllWaves","mining","setMining","message","setMessage","metamaskInstall","setMetamaskInstall","prevMessages","setPrevMessages","noMessages","setNoMessages","messageSuccessful","setMessageSuccessful","contractAddress","contractABI","abi","wave","e","preventDefault","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","getTotalWaves","count","console","log","toNumber","gasLimit","waveTxn","hash","wait","setTimeout","checkIfWalletisConnected","request","method","accounts","length","account","getAllWaves","connectWallet","alert","useEffect","WavePortalContract","waves","wavesCleaned","forEach","push","address","waver","timestamp","Date","onNewWave","from","prevState","on","off","wavesDisplay","map","index","key","className","toString","type","value","name","onChange","event","target","onClick","current","color","height","width","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eb23e285.chunk.js","sourcesContent":["import { ethers } from \"ethers\";\nimport * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport ReactLoading from 'react-loading'; \nimport { abi } from './utils/WavePortal.json'; \nimport './App.css';\n\nexport default function App() {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [loading, setLoading] = useState(false);  \n  const [sucessfull, setSucessfull] = useState(false); \n  const [allWaves, setAllWaves] = useState([]); \n  const [mining, setMining] = useState(false); \n  const [message, setMessage] = useState(\"\"); \n  const [metamaskInstall, setMetamaskInstall] = useState(false); \n  const [prevMessages, setPrevMessages] = useState(false); \n  const [noMessages, setNoMessages] = useState(false); \n  const [messageSuccessful, setMessageSuccessful] = useState(false); \n\n  const contractAddress = \"0x3412b425Cd05968DF71119C2B02deDe6e6CEDDA2\"; \n  const contractABI = abi; \n\n  const wave = async (e) => { \n    e.preventDefault(); \n\n    try {\n      const { ethereum } = window; \n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum); \n        const signer = provider.getSigner(); \n\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer); \n\n        let count = await wavePortalContract.getTotalWaves(); \n        console.log(\"Retrieved total wave count: \", count.toNumber()); \n\n        // Executing actual wave from the smart contract\n        setLoading(true); \n        const waveTxn = await wavePortalContract.wave(message, { gasLimit: 300000 }); \n        setLoading(false); \n        setMining(true); \n        console.log(\"Mining...\", waveTxn.hash); \n        \n        await waveTxn.wait(); \n        console.log(\"Mined ---\", waveTxn.hash); \n        setMining(false); \n        setMessageSuccessful(true); \n\n        setTimeout( () => {\n          setMessageSuccessful(false); \n        }, 5000)\n\n        // Retrieve the total waves\n        setLoading(true); \n        count = await wavePortalContract.getTotalWaves(); \n        setLoading(false); \n        console.log(\"Total waves are equal to: \", count); \n\n        console.log(\"Ethereum object exists\"); \n        console.log(\"Retrieved a total of: \", count.toNumber(), \" waves\"); \n        setMessage(\"\"); \n\n      } else {\n        console.log(\"Ethereum object does not exist\"); \n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const checkIfWalletisConnected = async () => { \n    try {\n      const { ethereum } = window; \n\n      if (!ethereum) { \n        setMetamaskInstall(true); \n        console.log(\"Make sure you have metamask installed\")\n      } else {\n        console.log(\"Ethereum from window object is found!\"); \n      }\n\n      // See if we have authorization to the users wallet \n      const accounts = await ethereum.request({method: \"eth_accounts\"}); \n      if (accounts.length !== 0){\n        const account = accounts[0]; \n\n        console.log(\"Found an authorized account: \", account); \n        setCurrentAccount(account); \n        getAllWaves(); \n\n      } else {\n        console.log(\"No authorized account found\"); \n      }\n    } catch (error) {\n        console.log(error)\n    }\n  } \n\n  const connectWallet = async () => {\n    setLoading(true)\n    try {\n      const { ethereum } = window; \n\n      if(!ethereum){\n        alert(\"Get Metamask!\"); \n        return; \n      } \n\n      const accounts = await ethereum.request({method: \"eth_requestAccounts\"}); \n\n      console.log(\"Connected: \", accounts[0]); \n      setCurrentAccount(accounts[0]); \n      setLoading(false); \n\n    } catch(error) {\n      console.log(error); \n      setLoading(false); \n    }\n    \n    setSucessfull(true); \n\n    setTimeout( () => {\n      setSucessfull(false); \n    }, 3000); \n\n  }\n\n  useEffect( () => {\n    checkIfWalletisConnected(); \n  }, [])\n\n  // Function that gets all the waves \n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window; \n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum); \n        const signer = provider.getSigner(); \n        const WavePortalContract = new ethers.Contract(contractAddress, contractABI, signer); \n\n        // Calling getAllWaves() method from the smart contract \n        setLoading(true); \n        const waves = await WavePortalContract.getAllWaves(); \n        setLoading(false); \n\n        // Picking address, timestamp and message that will be shown in the UI\n        let wavesCleaned = []; \n        waves.forEach( wave => {\n          wavesCleaned.push({\n            address: wave.waver, \n            timestamp: new Date(wave.timestamp * 1000), \n            message: wave.message\n          }); \n        }); \n        // Store the data in react state \n        setAllWaves(wavesCleaned); \n        console.log(wavesCleaned); \n      } else {\n        console.log(\"Ethereum objec does not exist\")\n      }\n    } catch (error) {\n        console.log(error)\n    }\n  }\n\n  // Listen for emitter events \n  useEffect( () => {\n    let wavePortalContract; \n\n    const onNewWave = (from, timestamp, message) => {\n      console.log(\"New wave: \", from, timestamp, message); \n      setAllWaves( prevState => [\n           ...prevState, \n           {\n             address: from, \n             timestamp: new Date(timestamp * 1000), \n             message: message\n           }, \n          ]); \n    }; \n\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum); \n      const signer = provider.getSigner(); \n\n      wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer); \n      wavePortalContract.on(\"NewWave\", onNewWave)\n    }\n\n    return () => {\n      if(wavePortalContract) {\n        wavePortalContract.off(\"NewWave\", onNewWave)\n      }\n    }\n  })\n\n  // Handling input \n  const handleChange = (event) => {\n    const {value} = event.target; \n    setMessage(value); \n  }\n\n  // Showing previous messages \n  const showPreviousMessages = () => {\n     if (allWaves.length === 0) {\n       setNoMessages(true); \n       setTimeout( () => {\n         setNoMessages(false); \n       }, 5000); \n       console.log(\"Opps no messages sent yet!\")\n     } else {\n      setPrevMessages( current => !current)\n     } \n  }\n   \n\n  const wavesDisplay = allWaves.map( (wave, index) => {\n    return (\n      <div key={index} className=\"prevMessages-div\">\n          <p>\n            Address: {wave.address} <br/> \n            Time: {wave.timestamp.toString()} <br/> \n            Message: {wave.message} \n          </p> \n      </div>\n    )\n  })\n  \n  return (\n    <div className=\"mainContainer\">\n\n      <div className=\"dataContainer\">\n        {\n          !currentAccount && (\n            <div className=\"intro\">\n                  <h1>Get some Ether!</h1>\n                  <p>Kindly follow the prompts</p>\n            </div>\n          )\n        }\n        {/* This button will render if there's no wallet connection */} \n        {\n          !metamaskInstall && (\n                !currentAccount ? ( \n                  !loading && (\n                    <>  \n                      <div className=\"connect-wallet\">\n                        <p>Connect your wallet to continue using the web app</p>\n                      </div>\n                      <button className=\"waveButton\" onClick={connectWallet}>\n                        connect wallet\n                      </button>\n                    </>  \n                )      \n                ) : (\n                  <>\n                      <div className=\"header\">\n                        Hey there!\n                      </div>\n\n                      <div className=\"bio\">\n                        I am Steve <br/>Send me a intriuging message and stand a chance to win some ether 🤓! \n                      </div>\n                      \n                      <form className=\"form-input\"> \n                        <input type=\"text\" className=\"message\" value={message} name=\"message\" onChange={handleChange} /> \n                        <button type=\"submit\" className=\"waveButton-wave\" onClick={wave}>\n                            Send message\n                        </button>\n                      </form>\n\n                      <button className=\"checkprev-button\" onClick={ () => showPreviousMessages() }>\n                        { prevMessages ? \"Hide\" : \"Check\" } previous messages \n                      </button>\n                  </>\n                )\n          )\n        }\n        {\n          loading && (\n            <>\n              <ReactLoading className=\"loader\" type=\"spin\" color=\"black\" height={20} width={70} /> \n            </>\n          )\n        }\n        {\n          mining && (\n           <div className=\"mining-div\">\n              <p>Mining</p>\n              <ReactLoading className=\"loader\" type=\"bubbles\" color=\"black\" height={10} width={70} /> \n           </div>\n          )\n        }\n        {\n          messageSuccessful && (\n            <div className=\"successfull\">\n               <p>Message sent successfully! Check out if you were lucky to get some ether 😎!</p>\n            </div>\n          )\n        }\n        {\n          sucessfull && (\n            <div className=\"successfull\">\n              <p>Wallet connected sucessfully!</p>\n            </div>\n          )\n        }\n        {\n          metamaskInstall && (\n            <div className=\"metamask-install\">\n              <p>Warning! Kindly install metamask in order to continue using the application <br/> Check it out over <a href=\"https://metamask.io/\" target=\"_blank\">here</a></p>\n            </div>\n          )\n        } \n        { \n          !loading && (\n              !mining && (\n                prevMessages && (\n                  <div className=\"prevMessages-container\">\n                    { wavesDisplay }\n                  </div>\n                )\n              )\n          )\n        }\n        {\n          noMessages && (\n            <div className=\"no-messages\">\n               <p>Opps😶! No messages here yet</p>\n            </div>\n          )\n        }\n\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}